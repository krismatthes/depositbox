generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id            String       @id @default(cuid())
  address       String
  propertyType  String?
  size          Int?
  monthlyRent   Decimal
  depositAmount Decimal
  prepaidRent   Decimal      @default(0)
  currency      String       @default("DKK")
  moveInDate    DateTime?
  status        String       @default("ACTIVE")
  landlordId    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  escrows       Escrow[]
  invitations   Invitation[]
  landlord      User         @relation(fields: [landlordId], references: [id])

  @@map("properties")
}

model Invitation {
  id         String    @id @default(cuid())
  token      String    @unique @default(cuid())
  type       String
  status     String    @default("PENDING")
  message    String?
  senderId   String
  receiverId String?
  propertyId String?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  property   Property? @relation(fields: [propertyId], references: [id])
  receiver   User?     @relation("InvitationReceiver", fields: [receiverId], references: [id])
  sender     User      @relation("InvitationSender", fields: [senderId], references: [id])

  @@map("invitations")
}

model Escrow {
  id                    String      @id @default(cuid())
  totalAmount           Int
  currency              String      @default("DKK")
  status                String      @default("CREATED")
  propertyId            String?
  propertyTitle         String?
  propertyAddress       String?
  buyerId               String
  sellerId              String
  userId                String?
  nestEscrowId          String?     @unique
  payproffTransactionId String?
  payproffHostedUrl     String?
  payoutSetupRequired   Boolean     @default(false)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  fundedAt              DateTime?
  releasedAt            DateTime?
  plannedReleaseDate    DateTime?
  buyer                 User        @relation("BuyerEscrows", fields: [buyerId], references: [id])
  nestEscrow            NestEscrow? @relation(fields: [nestEscrowId], references: [id])
  property              Property?   @relation(fields: [propertyId], references: [id])
  seller                User        @relation("SellerEscrows", fields: [sellerId], references: [id])
  user                  User?       @relation("UserEscrows", fields: [userId], references: [id])

  @@map("escrows")
}

model DraftContract {
  id        String   @id @default(cuid())
  title     String
  data      String
  status    String   @default("DRAFT")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("draft_contracts")
}

model SavedContract {
  id              String    @id @default(cuid())
  title           String
  data            String
  propertyAddress String
  tenantNames     String
  monthlyRent     Decimal
  moveInDate      DateTime?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])

  @@map("saved_contracts")
}

model NestEscrow {
  id                 String               @id @default(cuid())
  contractId         String?
  type               String               @default("DEPOSIT")
  status             String               @default("DRAFT")
  version            Int                  @default(1)
  landlordId         String
  tenantId           String
  address            String?
  propertyPostcode   String?
  propertyCity       String?
  propertyType       String?
  deposit            Int                  @default(0)
  rent               Int                  @default(0)
  prepaidRent        Int                  @default(0)
  utilitiesAmount    Int                  @default(0)
  totalAmount        Int                  @default(0)
  startDate          DateTime?
  endDate            DateTime?
  moveInDate         DateTime?
  moveOutDate        DateTime?
  claimWindowDays    Int                  @default(14)
  responseWindowDays Int                  @default(5)
  autoReleaseDays    Int                  @default(21)
  settlementRounds   Int                  @default(2)
  agreedAt           DateTime?
  fundedAt           DateTime?
  activatedAt        DateTime?
  releasePendingAt   DateTime?
  releasedAt         DateTime?
  disputedAt         DateTime?
  escalatedAt        DateTime?
  closedAt           DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  escrow             Escrow?
  invitations        LandlordInvitation[] @relation("NestInvitations")
  approvals          NestApproval[]
  auditLogs          NestAuditLog[]
  claims             NestClaim[]
  contracts          NestContract[]
  deadlines          NestDeadline[]
  disputes           NestDispute[]
  landlord           User                 @relation("LandlordNestEscrows", fields: [landlordId], references: [id])
  tenant             User                 @relation("TenantNestEscrows", fields: [tenantId], references: [id])
  evidence           NestEvidence[]
  releaseRules       NestReleaseRule[]
  transactions       NestTransaction[]
  tenantInvitations  TenantInvitation[]   @relation("TenantInvitations")

  @@map("nest_escrows")
}

model NestReleaseRule {
  id                     String         @id @default(cuid())
  escrowId               String
  type                   String
  triggerType            String
  triggerDate            DateTime?
  amount                 Int?
  percentage             Decimal?
  requiresNotification   Boolean        @default(true)
  notificationDaysBefore Int            @default(7)
  allowObjection         Boolean        @default(true)
  objectionPeriodDays    Int            @default(14)
  status                 String         @default("ACTIVE")
  triggeredAt            DateTime?
  executedAt             DateTime?
  createdAt              DateTime       @default(now())
  approvals              NestApproval[]
  escrow                 NestEscrow     @relation(fields: [escrowId], references: [id], onDelete: Cascade)

  @@map("nest_release_rules")
}

model NestTransaction {
  id                String         @id @default(cuid())
  escrowId          String
  type              String
  amount            Int
  initiatedById     String
  reason            String?
  status            String         @default("PENDING")
  scheduledDate     DateTime?
  executedAt        DateTime?
  paymentReference  String?
  bankTransactionId String?
  createdAt         DateTime       @default(now())
  approvals         NestApproval[]
  escrow            NestEscrow     @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  initiatedBy       User           @relation("InitiatedTransactions", fields: [initiatedById], references: [id])

  @@map("nest_transactions")
}

model NestApproval {
  id                   String           @id @default(cuid())
  escrowId             String
  transactionId        String?
  releaseRuleId        String?
  approverId           String
  approverRole         String
  status               String           @default("PENDING")
  responseAt           DateTime?
  comment              String?
  deadline             DateTime?
  autoApproveOnTimeout Boolean          @default(false)
  createdAt            DateTime         @default(now())
  approver             User             @relation("NestApprovals", fields: [approverId], references: [id])
  escrow               NestEscrow       @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  releaseRule          NestReleaseRule? @relation(fields: [releaseRuleId], references: [id], onDelete: Cascade)
  transaction          NestTransaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("nest_approvals")
}

model NestDispute {
  id            String     @id @default(cuid())
  escrowId      String
  initiatedById String
  reason        String
  amount        Int?
  status        String     @default("OPEN")
  resolution    String?
  createdAt     DateTime   @default(now())
  resolvedAt    DateTime?
  escrow        NestEscrow @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  initiatedBy   User       @relation("InitiatedDisputes", fields: [initiatedById], references: [id])

  @@map("nest_disputes")
}

model NestAuditLog {
  id              String     @id @default(cuid())
  escrowId        String
  action          String
  performedById   String
  performedByRole String
  details         String?
  ipAddress       String?
  hash            String?
  createdAt       DateTime   @default(now())
  escrow          NestEscrow @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  performedBy     User       @relation("PerformedActions", fields: [performedById], references: [id])

  @@map("nest_audit_log")
}

model NestContract {
  id               String     @id @default(cuid())
  escrowId         String
  version          Int
  status           String     @default("DRAFT")
  terms            String
  hash             String
  landlordSignedAt DateTime?
  tenantSignedAt   DateTime?
  createdAt        DateTime   @default(now())
  escrow           NestEscrow @relation(fields: [escrowId], references: [id], onDelete: Cascade)

  @@map("nest_contracts")
}

model NestClaim {
  id               String              @id @default(cuid())
  escrowId         String
  claimantId       String
  type             String
  amount           Int
  description      String
  status           String              @default("PENDING")
  currentRound     Int                 @default(1)
  responseDeadline DateTime
  respondedAt      DateTime?
  responseAction   String?
  createdAt        DateTime            @default(now())
  responses        NestClaimResponse[]
  claimant         User                @relation("NestClaims", fields: [claimantId], references: [id])
  escrow           NestEscrow          @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  evidence         NestEvidence[]

  @@map("nest_claims")
}

model NestClaimResponse {
  id          String    @id @default(cuid())
  claimId     String
  responderId String
  action      String
  amount      Int?
  comment     String?
  createdAt   DateTime  @default(now())
  claim       NestClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)
  responder   User      @relation("NestClaimResponses", fields: [responderId], references: [id])

  @@map("nest_claim_responses")
}

model NestEvidence {
  id           String     @id @default(cuid())
  escrowId     String
  claimId      String?
  uploadedById String
  type         String
  title        String
  description  String?
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  hash         String
  category     String?
  roomLocation String?
  createdAt    DateTime   @default(now())
  claim        NestClaim? @relation(fields: [claimId], references: [id], onDelete: Cascade)
  escrow       NestEscrow @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  uploadedBy   User       @relation("NestEvidence", fields: [uploadedById], references: [id])

  @@map("nest_evidence")
}

model NestDeadline {
  id                String     @id @default(cuid())
  escrowId          String
  type              String
  description       String
  deadline          DateTime
  status            String     @default("ACTIVE")
  autoAction        String?
  autoActionData    String?
  notifyDaysBefore  String     @default("[7,3,1]")
  notificationsSent String     @default("[]")
  createdAt         DateTime   @default(now())
  triggeredAt       DateTime?
  escrow            NestEscrow @relation(fields: [escrowId], references: [id], onDelete: Cascade)

  @@map("nest_deadlines")
}

model TenantDocument {
  id          String    @id @default(cuid())
  userId      String
  type        String
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  fileHash    String
  verified    Boolean   @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserDocuments", fields: [userId], references: [id], onDelete: Cascade)

  @@map("tenant_documents")
}

model LandlordInvitation {
  id              String      @id @default(cuid())
  token           String      @unique @default(cuid())
  tenantId        String
  landlordEmail   String
  landlordName    String?
  landlordId      String?
  subject         String
  message         String?
  propertyAddress String
  status          String      @default("PENDING")
  viewedAt        DateTime?
  respondedAt     DateTime?
  nestEscrowId    String?
  expiresAt       DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  landlord        User?       @relation("ReceivedLandlordInvitations", fields: [landlordId], references: [id])
  nestEscrow      NestEscrow? @relation("NestInvitations", fields: [nestEscrowId], references: [id])
  tenant          User        @relation("SentLandlordInvitations", fields: [tenantId], references: [id])

  @@map("landlord_invitations")
}

model TenantInvitation {
  id              String     @id @default(cuid())
  token           String     @unique @default(cuid())
  landlordId      String
  tenantEmail     String
  tenantName      String?
  tenantId        String?
  propertyAddress String
  message         String?
  nestEscrowId    String?    // Made optional to support different invitation types
  contractId      String?    // Added for lease contract invitations
  invitationType  String     @default("TENANT")  // TENANT, LANDLORD, CONTRACT
  invitationData  String?    // JSON data for flexible invitation content
  depositAmount   Int
  rentAmount      Int        @default(0)
  prepaidAmount   Int        @default(0)
  utilitiesAmount Int        @default(0)  // Added utilities amount
  totalAmount     Int
  status          String     @default("PENDING")
  viewedAt        DateTime?
  acceptedAt      DateTime?
  respondedAt     DateTime?
  expiresAt       DateTime
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  landlord        User       @relation("SentTenantInvitations", fields: [landlordId], references: [id])
  nestEscrow      NestEscrow? @relation("TenantInvitations", fields: [nestEscrowId], references: [id], onDelete: Cascade)
  tenant          User?      @relation("ReceivedTenantInvitations", fields: [tenantId], references: [id])

  @@map("tenant_invitations")
}

model User {
  id                          String               @id @default(cuid())
  email                       String               @unique
  password                    String
  firstName                   String
  lastName                    String
  phone                       String?
  role                        String               @default("USER")
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  cprNumber                   String?
  dateOfBirth                 DateTime?
  nationality                 String?
  currentAddress              String?
  previousAddresses           String?
  monthlyIncome               Int?
  employer                    String?
  employmentType              String?
  employmentStartDate         DateTime?
  previousLandlords           String?
  personalReferences          String?
  hasGuarantor                Boolean              @default(false)
  guarantorInfo               String?
  householdSize               Int?
  hasPets                     Boolean              @default(false)
  petInfo                     String?
  isSmoker                    Boolean              @default(false)
  emailVerified               Boolean              @default(false)
  phoneVerified               Boolean              @default(false)
  identityVerified            Boolean              @default(false)
  incomeVerified              Boolean              @default(false)
  creditChecked               Boolean              @default(false)
  creditScore                 Int?
  mitIdVerified               Boolean              @default(false)
  mitIdData                   String?
  profilePublic               Boolean              @default(false)
  allowContactFromLandlords   Boolean              @default(true)
  profileCompleteness         Int                  @default(0)
  emailVerificationToken      String?
  emailVerificationExpiry     DateTime?
  passwordResetToken          String?
  passwordResetExpiry         DateTime?
  lastLoginAt                 DateTime?
  profileUpdatedAt            DateTime?
  twoFactorEnabled            Boolean              @default(false)
  twoFactorSecret             String?
  twoFactorBackupCodes        String?
  twoFactorVerifiedAt         DateTime?
  draftContracts              DraftContract[]
  buyerEscrows                Escrow[]             @relation("BuyerEscrows")
  sellerEscrows               Escrow[]             @relation("SellerEscrows")
  escrows                     Escrow[]             @relation("UserEscrows")
  receivedInvitations         Invitation[]         @relation("InvitationReceiver")
  sentInvitations             Invitation[]         @relation("InvitationSender")
  receivedLandlordInvitations LandlordInvitation[] @relation("ReceivedLandlordInvitations")
  sentLandlordInvitations     LandlordInvitation[] @relation("SentLandlordInvitations")
  nestApprovals               NestApproval[]       @relation("NestApprovals")
  performedActions            NestAuditLog[]       @relation("PerformedActions")
  claimResponses              NestClaimResponse[]  @relation("NestClaimResponses")
  claims                      NestClaim[]          @relation("NestClaims")
  initiatedDisputes           NestDispute[]        @relation("InitiatedDisputes")
  createdNests                NestEscrow[]         @relation("LandlordNestEscrows")
  assignedNests               NestEscrow[]         @relation("TenantNestEscrows")
  uploadedEvidence            NestEvidence[]       @relation("NestEvidence")
  initiatedTransactions       NestTransaction[]    @relation("InitiatedTransactions")
  properties                  Property[]
  savedContracts              SavedContract[]
  documents                   TenantDocument[]     @relation("UserDocuments")
  sentTenantInvitations       TenantInvitation[]   @relation("SentTenantInvitations")
  receivedTenantInvitations   TenantInvitation[]   @relation("ReceivedTenantInvitations")

  @@map("users")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String?
  order     Int      @default(0)
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}
